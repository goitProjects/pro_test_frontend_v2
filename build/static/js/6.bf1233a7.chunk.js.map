{"version":3,"sources":["redux/selectors/testSelector.js","components/diagram/Diagram.module.scss","components/pages/results/Results.module.scss","components/diagram/Diagram.js","img/catResultPage.png","redux/selectors/resultsSelector.js","components/pages/results/Results.js","redux/operations/resultsOperations.js"],"names":["getTestData","state","tests","test","getTestType","type","module","exports","Diagram","percent","prevState","prevProps","this","props","slice","setState","className","styles","container","answers","textAnswers","textAnswersNumber","chart","chartType","loader","data","Number","Math","round","options","pieStartAngle","pieSliceText","slices","0","color","1","chartArea","left","top","width","height","backgroundColor","rootProps","Component","getTestAnswers","getResultsOfTest","resultsOfTest","results","Results","testAnswers","typeOfTests","resultsOperation","length","to","routes","mainPage","Loader","resultTitle","resultName","result","catImages","src","alt","mainMessage","secondaryMessage","buttonText","button","mapDispatchToProps","typeOfTest","dispatch","a","resultsRequest","postTechResults","resultsSuccess","resultsError","postTheoryResults","connect"],"mappings":"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","file":"static/js/6.bf1233a7.chunk.js","sourcesContent":["const getTestData = (state) => {\n  return state.tests.test;\n};\n\nconst getTestType = (state) => {\n  return state.tests.type;\n};\n\nexport { getTestData, getTestType };\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Diagram_container__SV_hN\",\"chart\":\"Diagram_chart__2Anff\",\"answers\":\"Diagram_answers__3WG_L\",\"textAnswers\":\"Diagram_textAnswers__2TOsu\",\"textAnswersNumber\":\"Diagram_textAnswersNumber__3AgBh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"Results_results__3m9nn\",\"resultTitle\":\"Results_resultTitle__2oSXK\",\"resultName\":\"Results_resultName__yP_OD\",\"catImages\":\"Results_catImages__234r9\",\"mainMessage\":\"Results_mainMessage__2oEoF\",\"secondaryMessage\":\"Results_secondaryMessage__3Oprw\",\"button\":\"Results_button__1zoal\",\"buttonText\":\"Results_buttonText__3iLfh\"};","import React, { Component } from \"react\";\n\nimport { Chart } from \"react-google-charts\";\nimport styles from \"./Diagram.module.scss\";\n\nclass Diagram extends Component {\n  state = { percent: null };\n\n  componentDidUpdate(prevState, prevProps) {\n    const percent = this.props.percent.slice(0, -1);\n\n    if (percent !== prevProps.percent) {\n      this.setState({ percent });\n    }\n  }\n\n  render() {\n    return  this.state.percent === \"0%\" ? (\n      <div className={styles.container}>\n        <div className={styles.answers}>\n          <p className={styles.textAnswers}>\n            Correct answers -{\" \"}\n            <span className={styles.textAnswersNumber}>0</span>\n          </p>\n          <p className={styles.textAnswers}>\n            Total questions -{\" \"}\n            <span className={styles.textAnswersNumber}>12</span>\n          </p>\n        </div>\n      </div>\n    ) : (\n      <div className={styles.container}>\n        <Chart\n          className={styles.chart}\n          chartType=\"PieChart\"\n          loader={<div>Loading Chart</div>}\n          data={[\n            [\"Task\", \"Hours per Day\"],\n            [\n              `${this.state.percent}%  Correct `,\n              Number(Math.round((this.state.percent / 100) * 12)),\n            ],\n            [\n              `${100 - this.state.percent}%  Incorrect `,\n              12 - Number(Math.round((this.state.percent / 100) * 12)),\n            ],\n          ]}\n          options={{\n            pieStartAngle: 100,\n            pieSliceText: \"none\",\n            slices: {\n              0: { color: \"#FF6B01\" },\n              1: { color: \"#D7D7D7\" },\n            },\n            chartArea: { left: 100, top: 10, width: \"90%\", height: \"90%\" },\n            backgroundColor: \"#f5f6fb\",\n          }}\n          rootProps={{ \"data-testid\": \"1\" }}\n        />\n        <div className={styles.answers}>\n          <p className={styles.textAnswers}>\n            Correct answers -{\" \"}\n            <span className={styles.textAnswersNumber}>\n              {Number(Math.round((this.state.percent / 100) * 12))}\n            </span>\n          </p>\n          <p className={styles.textAnswers}>\n            Total questions -{\" \"}\n            <span className={styles.textAnswersNumber}>12</span>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state) => ({\n//   percent: state.resultsOfTest.results.result,\n// });\n\n// export default connect(mapStateToProps)(Diagram);\nexport default Diagram;\n","export default __webpack_public_path__ + \"static/media/catResultPage.aa40c4d6.png\";","const getTestAnswers = (state) => {\n  return state.tests.answers;\n};\n\nconst getResultsOfTest = (state) => {\n  return state.resultsOfTest.results;\n};\n\nexport { getTestAnswers, getResultsOfTest };\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink, Redirect } from \"react-router-dom\";\n\nimport routes from \"../../../routers/routers\";\nimport Diagram from \"../../diagram/Diagram\";\nimport catImages from \"../../../img/catResultPage.png\";\nimport { getTestType } from \"../../../redux/selectors/testSelector\";\nimport { resultsOperation } from \"../../../redux/operations/resultsOperations\";\nimport { getTestAnswers, getResultsOfTest } from \"../../../redux/selectors/resultsSelector\"\n\nimport styles from \"./Results.module.scss\";\nimport Loader from \"../../loader/Loader\";\n\nclass Results extends Component {\n  state = {};\n\n  componentDidMount() {\n    const { testAnswers, typeOfTests, resultsOperation } = this.props;\n\n    if (testAnswers && testAnswers.answers.length === 12) {\n      resultsOperation(testAnswers, typeOfTests);\n    }\n  }\n\n  componentDidUpdate(prevState, prevProps) {\n    const results = this.props.results;\n\n    if (results !== prevProps.results) {\n      this.setState({ results });\n    }\n  }\n\n  render() {\n    const { testAnswers, results } = this.props;\n\n    return testAnswers === null || testAnswers.answers.length < 12 ? (\n      <Redirect to={routes.mainPage} />\n    ) : results.answers ? (\n      <Loader />\n    ) : (\n      <div className={styles.results}>\n        <h2 className={styles.resultTitle}>Results</h2>\n        <p className={styles.resultName}>\n          {this.props.typeOfTests === \"technical\"\n            ? `[ Testing technical_ ]`\n            : `[ Testing theory_ ]`}\n        </p>\n        <Diagram percent={results.result} />\n        <img className={styles.catImages} src={catImages} alt=\"cat\"></img>\n        <p className={styles.mainMessage}>{results.mainMessage}</p>\n        <p className={styles.secondaryMessage}>{results.secondaryMessage}</p>\n        <NavLink to={routes.test} className={styles.buttonText}>\n          <button className={styles.button} type=\"button\">\n            Try again\n          </button>\n        </NavLink>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  testAnswers: getTestAnswers(state), // Масив ответов из сторе\n  results: getResultsOfTest(state),\n  typeOfTests: getTestType(state), //для определения какой запрос делать\n});\n\nconst mapDispatchToProps = {\n  resultsOperation: resultsOperation,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);\n","import {\n  resultsRequest,\n  resultsSuccess,\n  resultsError,\n} from \"../actions/resultsAction\";\nimport { postTechResults, postTheoryResults } from \"../../servises/reqToApi\";\n\nconst resultsOperation = (tests, typeOfTest) => async (dispatch) => {\n  dispatch(resultsRequest());\n\n  if (typeOfTest === \"technical\") {\n    try {\n      const results = await postTechResults(tests);\n      dispatch(resultsSuccess(results));\n    } catch (error) {\n      dispatch(resultsError(error));\n    }\n  } else {\n    try {\n      const results = await postTheoryResults(tests);\n      dispatch(resultsSuccess(results));\n    } catch (error) {\n      dispatch(resultsError(error));\n    }\n  } \n};\n\nexport { resultsOperation };\n"],"sourceRoot":""}