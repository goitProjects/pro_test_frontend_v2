{"version":3,"sources":["redux/selectors/testSelector.js","components/diagram/Diagram.module.scss","components/pages/results/Results.module.scss","components/diagram/Diagram.js","img/catResultPage.png","redux/selectors/resultsSelector.js","components/pages/results/Results.js","redux/operations/resultsOperations.js"],"names":["getTests","state","tests","test","getTestType","type","getAnswers","answers","getIsLoading","loading","getHasTest","Boolean","length","module","exports","Diagram","percent","prevState","prevProps","this","props","slice","setState","className","styles","container","textAnswers","textAnswersNumber","chart","chartType","loader","data","options","pieStartAngle","pieSliceText","slices","0","color","1","chartArea","left","top","width","height","backgroundColor","rootProps","Number","Math","round","Component","getTestAnswers","getResultsOfTest","resultsOfTest","results","Results","testAnswers","typeOfTests","resultsOperation","history","push","_","resetResults","resetTest","Loader","resultTitle","resultName","result","catImages","src","alt","mainMessage","secondaryMessage","button","mapDispatchToProps","typeOfTest","dispatch","a","resultsRequest","postTechResults","resultsSuccess","errorHandler","error","cb","errAction","resultsError","postTheoryResults","connect"],"mappings":"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","file":"static/js/8.fbc54b39.chunk.js","sourcesContent":["const getTests = (state) => {\n  return state.tests.test;\n};\n\nconst getTestType = (state) => {\n  return state.tests.type;\n};\n\nconst getAnswers = (state) => state.tests.answers;\nconst getIsLoading = (state) => state.tests.loading;\nconst getHasTest = (state) => Boolean(getTests(state).length);\nconst getHasAnswers = (state) => Boolean(getAnswers(state).length);\n\nexport {\n  getTests,\n  getTestType,\n  getIsLoading,\n  getAnswers,\n  getHasTest,\n  getHasAnswers,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Diagram_container__SV_hN\",\"chart\":\"Diagram_chart__2Anff\",\"answers\":\"Diagram_answers__3WG_L\",\"textAnswers\":\"Diagram_textAnswers__2TOsu\",\"textAnswersNumber\":\"Diagram_textAnswersNumber__3AgBh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"Results_results__3m9nn\",\"resultTitle\":\"Results_resultTitle__2oSXK\",\"resultName\":\"Results_resultName__yP_OD\",\"catImages\":\"Results_catImages__234r9\",\"mainMessage\":\"Results_mainMessage__2oEoF\",\"secondaryMessage\":\"Results_secondaryMessage__3Oprw\",\"button\":\"Results_button__1zoal\",\"buttonText\":\"Results_buttonText__3iLfh\"};","import React, { Component } from \"react\";\n\nimport { Chart } from \"react-google-charts\";\nimport styles from \"./Diagram.module.scss\";\n\nclass Diagram extends Component {\n  state = { percent: null };\n\n  componentDidUpdate(prevState, prevProps) {\n    const percent = this.props.percent.slice(0, -1);\n\n    if (percent !== prevProps.percent) {\n      this.setState({ percent });\n    }\n  }\n\n  render() {\n    return  this.state.percent === \"0%\" ? (\n      <div className={styles.container}>\n        <div className={styles.answers}>\n          <p className={styles.textAnswers}>\n            Correct answers -{\" \"}\n            <span className={styles.textAnswersNumber}>0</span>\n          </p>\n          <p className={styles.textAnswers}>\n            Total questions -{\" \"}\n            <span className={styles.textAnswersNumber}>12</span>\n          </p>\n        </div>\n      </div>\n    ) : (\n      <div className={styles.container}>\n        <Chart\n          className={styles.chart}\n          chartType=\"PieChart\"\n          loader={<div>Loading Chart</div>}\n          data={[\n            [\"Task\", \"Hours per Day\"],\n            [\n              // `${this.state.percent}%  Correct `,\n              `${30}%  Correct `,\n              // Correct development version -START\n              // Number(Math.round((this.state.percent / 100) * 12)),\n              // Correct development version -END\n              // Version with bug for qa-marathon -START \n              30\n              // Version with bug for qa-marathon -END \n            ],\n            [\n              // `${100 - this.state.percent}%  Incorrect `,\n              `${95}%  Incorrect `,\n              // Correct development version -START\n              // 12 - Number(Math.round((this.state.percent / 100) * 12)),\n              // Correct development version -END\n              // Version with bug for qa-marathon -START \n              95\n              // Version with bug for qa-marathon -END \n            ],\n          ]}\n          options={{\n            pieStartAngle: 100,\n            pieSliceText: \"none\",\n            slices: {\n              0: { color: \"#FF6B01\" },\n              1: { color: \"#D7D7D7\" },\n            },\n            chartArea: { left: 100, top: 10, width: \"90%\", height: \"90%\" },\n            backgroundColor: \"#f5f6fb\",\n          }}\n          rootProps={{ \"data-testid\": \"1\" }}\n        />\n        <div className={styles.answers}>\n          <p className={styles.textAnswers}>\n            Correct answers -{\" \"}\n            <span className={styles.textAnswersNumber}>\n              {Number(Math.round((this.state.percent / 100) * 12))}\n            </span>\n          </p>\n          <p className={styles.textAnswers}>\n            Total questions -{\" \"}\n            <span className={styles.textAnswersNumber}>12</span>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state) => ({\n//   percent: state.resultsOfTest.results.result,\n// });\n\n// export default connect(mapStateToProps)(Diagram);\nexport default Diagram;\n","export default __webpack_public_path__ + \"static/media/catResultPage.aa40c4d6.png\";","const getTestAnswers = (state) => {\n  return state.tests.answers;\n};\n\nconst getResultsOfTest = (state) => {\n  return state.resultsOfTest.results;\n};\n\nexport { getTestAnswers, getResultsOfTest };\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\n\n// import routes from \"../../../routers/routers\";\nimport Diagram from \"../../diagram/Diagram\";\nimport catImages from \"../../../img/catResultPage.png\";\nimport { getTestType } from \"../../../redux/selectors/testSelector\";\nimport { resultsOperation } from \"../../../redux/operations/resultsOperations\";\nimport {\n  getTestAnswers,\n  getResultsOfTest,\n} from \"../../../redux/selectors/resultsSelector\";\nimport { resetTest } from \"../../../redux/actions/testAction\";\nimport { resetResults } from \"../../../redux/actions/resultsAction\";\n\nimport styles from \"./Results.module.scss\";\nimport Loader from \"../../loader/Loader\";\n\nclass Results extends Component {\n  state = { results: null };\n\n  componentDidMount() {\n    const { testAnswers, typeOfTests, results, resultsOperation } = this.props;\n\n    if (testAnswers && testAnswers.length === 12) {\n      resultsOperation(testAnswers, typeOfTests);\n    }\n    results.answers === null &&\n      testAnswers.length === 0 &&\n      this.props.history.push(\"/\");\n  }\n\n  componentDidUpdate(_, prevProps) {\n    const { results } = this.props;\n\n    if (results !== prevProps.results) {\n      this.setState({ results });\n    }\n  }\n\n  componentWillUnmount() {\n    const { resetResults, resetTest } = this.props;\n    resetResults();\n    resetTest();\n  }\n\n  render() {\n    const { results } = this.props;\n\n    return (\n      // testAnswers === null || testAnswers.length < 12 ? (\n      //   <Redirect to={routes.mainPage} />\n      // ) :\n      results.answers ? (\n        <Loader />\n      ) : (\n        <div className={styles.results}>\n          <h2 className={styles.resultTitle}>Results</h2>\n          <p className={styles.resultName}>\n            {this.props.typeOfTests === \"technical\"\n              ? `[ Testing technical_ ]`\n              : `[ Testing theory_ ]`}\n          </p>\n          <Diagram percent={results.result} />\n          <img className={styles.catImages} src={catImages} alt=\"cat\"></img>\n          <p className={styles.mainMessage}>{results.mainMessage}</p>\n          <p className={styles.secondaryMessage}>{results.secondaryMessage}</p>\n          {/* <NavLink to={this.props.location} className={styles.buttonText}> */}\n            <button className={styles.button} type=\"button\">\n              Try again\n            </button>\n          {/* </NavLink> */}\n        </div>\n      )\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  testAnswers: getTestAnswers(state), // Масив ответов из сторе\n  results: getResultsOfTest(state),\n  typeOfTests: getTestType(state), //для определения какой запрос делать\n});\n\nconst mapDispatchToProps = {\n  resultsOperation,\n  resetTest,\n  resetResults,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);\n","import {\n  resultsRequest,\n  resultsSuccess,\n  resultsError,\n} from \"../actions/resultsAction\";\nimport { postTechResults, postTheoryResults } from \"../../servises/reqToApi\";\nimport { errorHandler } from \"./errorHandlerOperation\";\n\nconst resultsOperation = (tests, typeOfTest) => async (dispatch) => {\n  dispatch(resultsRequest());\n\n  if (typeOfTest === \"technical\") {\n    try {\n      const results = await postTechResults(tests);\n      dispatch(resultsSuccess(results));\n    } catch (error) {\n      dispatch(\n        errorHandler({\n          error,\n          cb: () => resultsOperation(tests, typeOfTest),\n          errAction: resultsError,\n        })\n      );\n    }\n  } else {\n    try {\n      const results = await postTheoryResults(tests);\n      dispatch(resultsSuccess(results));\n    } catch (error) {\n      dispatch(\n        errorHandler({\n          error,\n          cb: () => resultsOperation(tests, typeOfTest),\n          errAction: resultsError,\n        })\n      );\n    }\n  }\n};\n\nexport { resultsOperation };\n"],"sourceRoot":""}